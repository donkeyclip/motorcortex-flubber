const Group = require('../_BaseClasses/Group');
const AttributesAwareIncident = require('./AttributeAwareIncident');
const Helper = require('../_coreUtils/Helper');
const helper = new Helper();

class DOMAwareIncident extends Group {
    constructor(descriptiveIncident, contextData) {
        // we make sure the DOMAwareIncident takes the same id as the Descriptive Incident
        super({}, { id: descriptiveIncident.id });

        // a property to hold all of the contexts
        this.contexts = {};
        this.contexts[contextData.clipId] = contextData.context;
        this.originalContextKey = contextData.clipId;
        this.instantiatedCopiesContexts = contextData.instantiatedCopiesContexts;

        this.setUp(descriptiveIncident, contextData);
    }


    get originalContext() {
        return this.contexts[this.originalContextKey];
    }


    setUp(descriptiveIncident, contextData) {
        // the elements of the original context
        const elements = Array.from(this.originalContext.rootElement.querySelectorAll(descriptiveIncident.selector()));
        // the elements for each of the copied contexts
        const copiesElements = {};
        for (let contextKey in this.instantiatedCopiesContexts) {
            copiesElements[contextKey] = Array.from(this.instantiatedCopiesContexts[contextKey].rootElement.querySelectorAll(descriptiveIncident.props.selector));
        }

        const totalElements = elements.length;
        for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            // set the mcid of the element on index i of the original context
            const mcid = this._getElementMCID(element);
            // set the same mcid for the elements of the same context in all of the instantiatedCopiesContexts
            for (let contextKey in this.instantiatedCopiesContexts) {
                this._setElementMCID(this.instantiatedCopiesContexts[contextKey], this.instantiatedCopiesContexts[contextKey][i], mcid);
            }
            this._createElementIncident(element, descriptiveIncident, contextData, i, totalElements, mcid);
        }
    }

    _getElementMCID(element) {
        let mcid = this.originalContext.getMCID(element);
        if (!mcid) {
            mcid = helper.getAnId(true);
            this.originalContext.setMCID(element, mcid);
        }
        return mcid;
    }

    _setElementMCID(context, element, mcid) {
        let existingMCID = context.getMCID(element);
        if (!existingMCID) {
            context.setMCID(element, mcid);
        }
    }


    _createElementIncident(element, descriptiveIncident, contextData, elementIndex, totalElements, mcid) {
        const attributeAwareIncident = new AttributesAwareIncident(descriptiveIncident, contextData,
            mcid, contextData.context.getElementSelectorByMCID(mcid));
        this.addChild(attributeAwareIncident, 0);
    }

}

module.exports = DOMAwareIncident;
