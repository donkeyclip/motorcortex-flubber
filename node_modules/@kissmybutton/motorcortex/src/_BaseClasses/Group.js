const Node = require('../_Tree/Node');
const Channel = require('../_Channels/Channel');
const handleResize = require('./decorators/handleResize');


class Group extends Node {
    constructor(attrs, props) {
        super(props);

        this.mc_plugin_npm_name = 'motor-cortex-js';
        this.plugin_channel_class = Channel;

        this.hasIncidents = true;
        this.onGroupInitialise();

        this.calculatedDuration = 0;
    }


    onGroupInitialise() {
        // called when group gets initialised
    }

    handleAddIncident(target, payload) {
        if (this.id === target) {
            const incidentFromDescription = require('../IncidentFromDefinition/incidentFromDescription');
            return incidentFromDescription(payload.incident, payload.contextData);
        }
        else {
            return this.bypass();
        }
    }

    handleMoveIncident(target, payload) {
        if (this.id === target) {
            return this.getLeafById(payload.incidentId, true);
        }
        else {
            return this.bypass();
        }
    }

    handleRemoveIncident(target, payload) {
        if (this.id === target) {
            return this.getLeafById(payload.incidentId, true);
        }
        else {
            return this.bypass();
        }
    }

    @handleResize
    handleResize() {}

    removeChild(id) {
        this.children[id].leaf.lastWish();
        super.removeChild(id);
    }


    /**
     * Returns an object that has the key of the npm plugin name the Channel of which manages the specific Incident
     * With the same logic all Incidents that belong to this Group as categorised by plugin / channel on the same object
     */
    getIncidentsByChannel(adjustMillisecond = 0, parentMillisecond = 0) {
        // initially it only puts itself onthe incidentsByPlugin array, exactly as the plain Incidents do
        let incidentsByPlugin = {};

        incidentsByPlugin['motor-cortex-js'] = [{
            millisecond: adjustMillisecond,
            parentMillisecond: parentMillisecond,
            incident: this,
            id: this.id
        }];

        // proceed to gather the contained incidents as well
        for (let childId in this.children) {
            const child = this.children[childId];
            const incidentsToAdd = child.leaf.getIncidentsByChannel(adjustMillisecond + child.position, adjustMillisecond);
            for (let key in incidentsToAdd) {
                if (Object.prototype.hasOwnProperty.call(incidentsByPlugin, key)) {
                    incidentsByPlugin[key] = incidentsByPlugin[key].concat(incidentsToAdd[key]);
                }
                else {
                    incidentsByPlugin[key] = incidentsToAdd[key];
                }
            }
        }
        return incidentsByPlugin;
    }


    lastWish() {
        for (let childId in this.children) {
            this.children[childId].leaf.lastWish();
        }
    }


}

module.exports = Group;
