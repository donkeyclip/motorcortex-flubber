const TimedIncident = require('../_BaseClasses/Incident');
const Helper = require('../_coreUtils/Helper');
const helper = new Helper();

class ClipCopy extends TimedIncident {
    constructor(attrs, props, dna) {
        super(attrs, props, dna);
        this.realClip = dna.descriptiveIncident.realClip;

        this.runTimeInfo = {
            currentMillisecond: 0
        };
    }

    get duration() {
        return this.realClip.duration;
    }

    set duration(milliseconds) {
        this.realClip._resize(milliseconds / this.realClip.duration);
    }

    lastWish() {
        this.ownClip.ownContext.unmount();
    }

    onGetContext() {
        // In order to render itself on the given element first it needs the props (including html and css)
        // from the real Clip it copies
        const constructionArgs = this.realClip.exportConstructionArguments();
        // it properly sets its own host on the props to use to initialise its own clip
        const host = helper.getElementByMCID(this.context, this.mcid);
        const hostedProps = { ...constructionArgs.props, selector: undefined, host: host };
        // we create a clip because Clips on creation render and thus have their own context
        this.ownClip = new this.dna.descriptiveIncident.constructor.Incident(constructionArgs.attrs, hostedProps);

        // console.log(this.ownClip);
        // flushes the realClip with its ownClip's context
        this.realClip.addContext({
            clipId: this.id,
            context: this.ownClip.ownContext
        }, true);
        // even though we have created an own clip, we have made no checks at all neither
        // we added the incidents of the real clip to it. That is becuase playing and moving
        // this clip copy means directly moving the real clip on the context of the own clip.
        // So the only thing we need here is the context and nothing more.
    }

    onProgress(fraction, milliseconds, forceReset = false) {
        for (let key in this.realClip.instantiatedChannels) {
            const channel = this.realClip.instantiatedChannels[key];
            channel.moveTo(this.runTimeInfo.currentMillisecond, milliseconds, this.id, forceReset);
        }
        this.runTimeInfo.currentMillisecond = milliseconds;
    }

}

module.exports = ClipCopy;
