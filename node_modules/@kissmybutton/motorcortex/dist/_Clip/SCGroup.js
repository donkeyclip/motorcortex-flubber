"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conf = require('../configuration/generalConf'); // context handlers


var IframeContextHandler = require('./helpers/IframeContextHandler');

var WebComponentContextHandler = require('./helpers/WebComponentContextHandler');

var ExtendableClip = require('./ExtendableClip');

var Clip =
/*#__PURE__*/
function (_ExtendableClip) {
  _inherits(Clip, _ExtendableClip);

  /**
   * @param {object} props - an object that should contain all of the following keys:
   * - html (the html template to render)
   * - css (the css template of the isolated tree)
   * - initParams (optional / the initialisation parameteres that will be passed both on the css and the html templates in order to render)
   * - host (an Element object that will host the isolated tree)
   * - containerParams (an object that holds parameters to affect the container of the isolated tree, e.g. width, height etc)
   */
  function Clip() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var oldProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Clip);

    var attrsToPass, propsToUse;
    /*
    backwards compatibility. If the user doesn't pass a second argument on the constructor then this is
    the new way of initialising a Group (only props).
    */

    if (oldProps === null) {
      attrsToPass = {};
      propsToUse = props;
    } else {
      // else, in case the user has passed two arguments then both should be used
      attrsToPass = props;
      propsToUse = oldProps;
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clip).call(this, attrsToPass, propsToUse)); // that means the Clip is hosted or, in other words a host has been
    // provided on the props (and not a selector)

    _this.isHostedClip = true;
    var clipType = conf.selfContainedContextHandler;
    _this.clipType = clipType;
    var ContextHanlder = null;

    if (document.head.createShadowRoot || document.head.attachShadow) {
      ContextHanlder = WebComponentContextHandler;
    } else {
      ContextHanlder = IframeContextHandler;
    } // console.log(`this.id: ${this.id}, Class: ${this.constructor.name}, this.html: ${this.html}`)


    var contextHanlder = new ContextHanlder(propsToUse);
    _this.ownContext = contextHanlder.context;
    _this.iframe = contextHanlder.iframeElement;
    _this.forceExportIncidents = true;

    _this.onDOMCLipInitialise();

    return _this;
  }

  _createClass(Clip, [{
    key: "onDOMCLipInitialise",
    value: function onDOMCLipInitialise() {// implement here
    }
  }, {
    key: "rootElement",
    get: function get() {
      return this.ownContext.clipContainer;
    }
  }]);

  return Clip;
}(ExtendableClip);

module.exports = Clip;