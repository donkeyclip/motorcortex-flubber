"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMAwareIncident = require('./DOMAwareIncident');
/**
 * This Class acts as the DOM Aware Incident for Groups (that take selector on props).
 *
 * The Class has a dynamic nature as it tries to apply
 * the exact same actions to all of its children. Some of its children might
 * accept the edits while others might not depending on the lanes and the Incidents
 * that exists at the time and that affect the elements belonging to the selector.
 */


var DOMAwareGroupIncident =
/*#__PURE__*/
function (_DOMAwareIncident) {
  _inherits(DOMAwareGroupIncident, _DOMAwareIncident);

  function DOMAwareGroupIncident() {
    _classCallCheck(this, DOMAwareGroupIncident);

    return _possibleConstructorReturn(this, _getPrototypeOf(DOMAwareGroupIncident).apply(this, arguments));
  }

  _createClass(DOMAwareGroupIncident, [{
    key: "addIncident",
    value: function addIncident(incident, millisecond, sceneId) {
      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "all-or-nothing";
      var autoGenerated = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      this.originalIncident.addIncident(incident, millisecond, sceneId, type, autoGenerated);
      var result = {
        result: true,
        conflicts: []
      };

      for (var i = 0; i < this.incidents.length; i++) {
        var subResult = this.incidents[i].incident.addIncident(incident, millisecond, sceneId, type, autoGenerated);

        if (subResult.result === false) {
          result.conflicts.push({
            type: "conflicts on addition of Incident on plain group of element ".concat(i),
            meta: subResult.conflicts
          });
        }
      }

      return result;
    }
  }, {
    key: "editIncident",
    value: function editIncident(id, newmillisecond) {
      this.originalIncident.editIncident(id, newmillisecond);

      this._emptyIncidents();

      return this.flashDOM();
    }
  }, {
    key: "removeIncident",
    value: function removeIncident(id) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _get(_getPrototypeOf(DOMAwareGroupIncident.prototype), "removeIncident", this).call(this, id, props);

      this._emptyIncidents();

      return this.flashDOM();
    }
  }, {
    key: "resizeIncident",
    value: function resizeIncident(incidentId, newDuration) {
      this.originalIncident.resizeIncident(incidentId, newDuration);

      this._emptyIncidents();

      return this.flashDOM();
    }
  }, {
    key: "editIncidentAttributes",
    value: function editIncidentAttributes(incidentId, attrs) {
      this.originalIncident.editIncidentAttributes(incidentId, attrs);

      this._emptyIncidents();

      return this.flashDOM();
    }
  }, {
    key: "editIncidentDurationParams",
    value: function editIncidentDurationParams(incidentId, params) {
      this.originalIncident.editIncidentDurationParams(incidentId, params);

      this._emptyIncidents();

      return this.flashDOM();
    }
  }]);

  return DOMAwareGroupIncident;
}(DOMAwareIncident);

module.exports = DOMAwareGroupIncident;